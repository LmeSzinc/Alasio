from alasio.assets_dev.extract import AssetsExtractor
from alasio.assets_dev.parse import AssetModule, AssetMultilang
from alasio.config.const import Const
from alasio.ext.codegen import CodeGen
from alasio.ext.path import PathStr
from alasio.ext.path.atomic import atomic_remove
from alasio.ext.path.calc import get_name, uppath
from alasio.ext.path.iter import iter_files
from alasio.logger import logger


class AssetsExtractorALAS(AssetsExtractor):
    def patch_const(self):
        Const.ASSETS_PATH = 'assets'
        Const.ASSETS_MODULE = 'module'
        Const.ASSETS_LANG = dict.fromkeys(['cn', 'en', 'jp', 'tw'])

    def populate(self):
        # Alas don't have populate
        return

    def gen_asset(self, gen, asset):
        """
        Generate code for an asset

        Args:
            gen (CodeGen):
            asset (AssetMultilang):
        """
        if asset.asset.startswith('TEMPLATE_'):
            file = {}
            for lang in Const.ASSETS_LANG:
                data_frame = asset.dict_lang_frame.get(lang, {})
                if not data_frame:
                    data_frame = asset.dict_lang_frame.get('cn', {})
                for frame in data_frame.values():
                    file[lang] = './' + frame.path
                    # alas has only one frame
                    break
            gen.add(f'{asset.asset} = Template(file={file})')
        else:
            area = {}
            color = {}
            button = {}
            file = {}
            for lang in Const.ASSETS_LANG:
                data_frame = asset.dict_lang_frame.get(lang, {})
                if not data_frame:
                    data_frame = asset.dict_lang_frame.get('cn', {})
                for frame in data_frame.values():
                    area[lang] = frame.area
                    color[lang] = frame.color
                    button[lang] = frame.button
                    file[lang] = './' + frame.path
                    # alas has only one frame
                    break
            gen.add(f'{asset.asset} = Button(area={area}, color={color}, button={button}, file={file})')

    def gen_module(self, gen, module):
        """
        Generate code for a module

        Args:
            gen (CodeGen):
            module (AssetModule):
        """
        # header
        gen.RawImport("""
        from module.base.button import Button
        from module.base.template import Template
        """, empty=1)
        # This file was automatically generated by dev_tools/button_extract.py.
        # Don't modify it manually.
        gen.Comment("This file was automatically generated by dev_tools/button_extract.py.")
        gen.Comment("Don't modify it manually.")
        gen.Empty()

        # assets
        for asset in module:
            self.gen_asset(gen, asset)

    def gen_output(self, module):
        """
        Args:
            module (AssetModule):

        Returns:
            PathStr: output file of module
        """
        # module/combat/assets.py
        module, _, _ = module.module.partition('/')
        file = self.root.joinpath(f'{Const.ASSETS_MODULE}/{module}/assets.py')
        return file

    def file_to_module(self, file):
        # /assets/cn/combat/xxx.png -> combat
        path = get_name(uppath(file))
        return path

    @staticmethod
    def remove_old_files(files):
        """
        remove old files from the output folder,
        leaving auto-generated files and __init__.py only

        Args:
            files (set[PathStr]): all output files
        """
        # get all output folders
        folders = set()
        for file in files:
            folder = file.uppath()
            folders.add(folder)
        # iter existing files
        for folder in folders:
            for file in iter_files(folder, ext='.py', recursive=False):
                if file in files:
                    continue
                if file.endswith('__init__.py'):
                    continue
                # remove file
                # only remove assets.py in alas
                if file.endswith('assets.py'):
                    logger.info(f'Remove file: {file}')
                    atomic_remove(file)


if __name__ == '__main__':
    self = AssetsExtractorALAS(r'E:/ProgramData/pycharm/AzurLaneAutoScript')
    while 1:
        self.watch_files()
